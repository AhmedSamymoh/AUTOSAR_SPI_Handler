pipeline {
    agent { label 'Master' }
    tools {
        allure 'allure'
    }

    environment {
        INTEGRATOR_EMAIL = 'ahmeds.elnozahy@gmail.com'
    }

    stages {
        stage('Identify Git Event') {
            steps {
                script {
                    if (env.ghprbPullId) {
                        echo "This is a pull request from branch: ${env.ghprbSourceBranch}"
                        currentBuild.displayName = "PR-${env.ghprbSourceBranch}-${env.ghprbPullId} - Build #${env.BUILD_NUMBER}"
                    } else {
                        echo "Push Event detected for Build #${env.BUILD_NUMBER}"
                        currentBuild.displayName = "Push - Build #${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage('Push Pipeline') {
            parallel {
                stage('SWE 4') {
                    stages {
                        stage('Build') {
                            agent { label 'Windows' }
                            steps {
                                echo "Building the project ..."
                                bat '''
                                cd %WORKSPACE%\\STM_SPIHandler_Project\\Debug
                                make clean
                                make -j16 all
                                '''
                            }
                        }

                        stage('Static Code Analysis') {
                            steps {
                                echo "Running Static Code Analysis..."
                                sh '''
                                cd ${WORKSPACE}/STM_SPIHandler_Project/COM/MCAL/SPI/src/
                                /var/jenkins_home/MisraC/Misra_src_check.sh Spi.c
                                '''
                            }
                        }

                        stage('Unit Testing') {
                            steps {
                                echo "============================================================================================="
                                echo "building the Gtest project"
                                sh '''
                                    cd $PWD/UnitTesting/Gtest/
                                    pwd
                                    cmake CMakeLists.txt
                                    cmake --build .
                                '''
                                echo "============================================================================================="
                                echo "Running unit tests with Google Test..."
                                echo "============================================================================================="
                                sh '''
                                    cd $PWD/UnitTesting/Gtest/
                                    ./Spi || true
                                '''
                                echo "============================================================================================="
                            }
                        }

                        stage('Code Coverage Analysis') {
                            steps {
                                echo "Creating code coverage..."
                                sh '''
                                cd $PWD/UnitTesting/Gtest/
                                g++ -O0 -fprofile-arcs -ftest-coverage Spi_tests.cpp -L/path/to/gtest/libs -lgtest -lgtest_main -pthread -o Spi_tests
                                ./Spi_tests || true
                                gcov Spi_tests.cpp
                                lcov --capture --directory . --output-file coverage.info
                                genhtml coverage.info --output-directory out
                                '''
                            }
                        }

                        stage('Allure Report SUT') {
                            steps {
                                echo "============================================================================================="
                                script {
                                    // if the test fails, the build will not fail
                                    def testResult = sh(script: './UnitTesting/Gtest/Spi --gtest_output=xml:report.xml || true', returnStatus: true)
                                    sh '''
                                    mkdir -p allure-results
                                    mv report.xml allure-results

                                    '''
                                    
                                    if (testResult != 0) {
                                        echo "Some tests failed. Check the Allure report for details."
                                    }
                                    sh 'allure generate allure-results --clean -o ALLURE_REPORT'
                                    allure includeProperties: true, jdk: '', results: [[path: '/ALLURE_REPORT']]
                                }
                                echo "============================================================================================="
                            }
                        }
                    }
                }
            }
        }

        stage('Pull Request Pipeline') {
            parallel {
                stage('SWE 5') {
                    // when {
                    //     expression { env.ghprbPullId }
                    // }
                    stages {
                        stage('Integration Tests') {
                            agent { label 'Windows' }
                            steps {
                                bat '''
                                cd %WORKSPACE%\\Tools\\IntegrationTesting\\
                                start /B openocd.exe -f .\\Nucleo_F446NE_Debug.cfg
                                .\\batch.bat
                                py.test.exe .\\Debbugging.py  
                                '''
                                bat '''
                                cd %WORKSPACE%\\Tools\\IntegrationTesting\\
                                py.test.exe .\\Debbugging.py  
                                '''
                                cleanWs()
                            }
                        }
                    }
                }
            }
        }
        

        stage('Release Notes') {
            parallel {
                stage('Jira Release Notes') {
                    when {
                        expression { env.ghprbSourceBranch == 'master' && env.ghprbPullId }
                    }
                    steps {
                        script {
                            echo "This is a pull request from branch: ${env.ghprbSourceBranch}"
                            currentBuild.displayName = "Release Notes v.${env.ghprbPullId} - Build #${env.BUILD_NUMBER}"
                        }
                        echo "Generating Jira release notes..."
                        dir('/Tools/Jira') {
                            sh 'apt-get install jq -y'
                            sh 'chmod 777 ./jira.sh'
                            sh './jira.sh'
                            echo "Jira Release Notes:"
                            sh 'cat jira_sprint_issues.txt'
                        }
                    }
                }
            }
        }

        stage('Email notification') {
            parallel {
            stage('Email notification') {
                    when {
                        expression { env.ghprbSourceBranch == 'master' && env.ghprbPullId }
                    }
                    steps {
                        script {
                            def committerEmail = sh(script: "git log -1 --pretty=format:'%ae'", returnStdout: true).trim()
                            env.COMMITTER_EMAIL = committerEmail
                            def recipientEmails = "${env.INTEGRATOR_EMAIL},${env.COMMITTER_EMAIL}"
                            mail(
                                to: recipientEmails,
                                subject: "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}",
                                body: """
                                    <p>Build ${env.BUILD_NUMBER} for job <b>${env.JOB_NAME}</b> finished with status: ${currentBuild.currentResult}</p>
                                    <p>Branch: ${env.BRANCH_NAME}</p>
                                    <p>Commit: ${env.GIT_COMMIT}</p>
                                    <p>Check console output at <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                                """,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
            }
        }
    }
}
